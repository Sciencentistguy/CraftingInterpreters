//# vim: set ft=rust:
use rclox::vm::VM;

type Result<T> = std::result::Result<T, Box<dyn std::error::Error>>;

// Print

// Number literals

// Operators

//Variables


// Nil

#[test]
fn test_nil_literal() -> Result<()> {
    let mut vm = VM::new();
    const PROGRAM: &str = r#"print nil;"#;
    let printed = vm.interpret(PROGRAM)?;
    assert_eq!(printed, &["nil"]);
    Ok(())
}

// Comments

#[test]
fn test_comment_last_line() -> Result<()> {
    let mut vm = VM::new();
    const PROGRAM: &str = r#"print "ok";
    //comment"#;
    let printed = vm.interpret(PROGRAM)?;
    assert_eq!(printed, &["ok"]);
    Ok(())
}

#[test]
fn test_comment_only_line() -> Result<()> {
    let mut vm = VM::new();
    const PROGRAM: &str = "//comment\n";
    let printed = vm.interpret(PROGRAM)?;
    assert!(printed.is_empty());
    Ok(())
}

#[test]
fn test_comment_only() -> Result<()> {
    let mut vm = VM::new();
    const PROGRAM: &str = "//comment";
    let printed = vm.interpret(PROGRAM)?;
    assert!(printed.is_empty());
    Ok(())
}

#[test]
fn test_comment_unicode() -> Result<()> {
    let mut vm = VM::new();
    const PROGRAM: &str = r#"// Unicode characters are allowed in comments.
//
// Latin 1 Supplement: £§¶ÜÞ
// Latin Extended-A: ĐĦŋœ
// Latin Extended-B: ƂƢƩǁ
// Other stuff: ឃᢆ᯽₪ℜ↩⊗┺░
// Emoji: ☃☺♣

print "ok";"#;
    let printed = vm.interpret(PROGRAM)?;
    assert_eq!(printed, &["ok"]);
    Ok(())
}

#[test]
fn test_assignment_associativity() -> Result<()> {
    let mut vm = VM::new();
    const PROGRAM: &str = r#"var a = "a";
var b = "b";
var c = "c";

// Assignment is right-associative.
a = b = c;
print a;
print b;
print c;"#;
    let printed = vm.interpret(PROGRAM)?;
    assert_eq!(printed, &["c", "c", "c"]);
    Ok(())
}

#[test]
fn test_assignment_global() -> Result<()> {
    let mut vm = VM::new();
    const PROGRAM: &str = r#"var a = "before";
print a;

a = "after";
print a;

print a = "arg";
print a;"#;
    let printed = vm.interpret(PROGRAM)?;
    assert_eq!(printed, &["before", "after", "arg", "arg"]);
    Ok(())
}

#[test]
fn test_assignment_syntax() -> Result<()> {
    let mut vm = VM::new();
    const PROGRAM: &str = r#"var a = "before";
var c = a = "var";
print a;
print c;"#;
    let printed = vm.interpret(PROGRAM)?;
    assert_eq!(printed, &["var", "var"]);
    Ok(())
}

#[test]
fn test_assignment_local() -> Result<()> {
    let mut vm = VM::new();
    const PROGRAM: &str = r#"{
  var a = "before";
  print a; // expect: before

  a = "after";
  print a; // expect: after

  print a = "arg"; // expect: arg
  print a; // expect: arg
}"#;
    let printed = vm.interpret(PROGRAM)?;
    assert_eq!(printed, &["before", "after", "arg", "arg"]);
    Ok(())
}

#[test]
fn test_assignment_grouping() -> Result<()> {
    let mut vm = VM::new();
    const PROGRAM: &str = r#"var a = "a";
    (a) = "value";"#;
    check_error_msg!(
        vm.interpret(PROGRAM),
        "<Compiler> [Line 1] Error at '=': Invalid assignment target",
        "Assignemnt targets must be raw variable names, not groups."
    );
    Ok(())
}

#[test]
fn test_assignment_infix_operator() -> Result<()> {
    let mut vm = VM::new();
    const PROGRAM: &str = r#"var a = "a";
    var b = "b";
    a + b = "value";"#;
    check_error_msg!(
        vm.interpret(PROGRAM),
        "<Compiler> [Line 2] Error at '=': Invalid assignment target",
        "Assignemnt targets must be raw variable names, not expressions."
    );
    Ok(())
}

#[test]
fn test_assignment_prefix_operator() -> Result<()> {
    let mut vm = VM::new();
    const PROGRAM: &str = r#"var a = "a";
    !a = "value";"#;
    check_error_msg!(
        vm.interpret(PROGRAM),
        "<Compiler> [Line 1] Error at '=': Invalid assignment target",
        "Assignemnt targets must be raw variable names, not expressions."
    );
    Ok(())
}

#[test]
fn test_assignment_undefined_name() -> Result<()> {
    let mut vm = VM::new();
    const PROGRAM: &str = r#"not_defined = "hello";"#;
    check_error_msg!(
        vm.interpret(PROGRAM),
        "<Runtime> [Line 0] Error: Undefined variable not_defined",
        "Assignemnt targets must be raw variable names, not expressions."
    );
    Ok(())
}

#[test]
fn test_block_empty() -> Result<()> {
    let mut vm = VM::new();
    const PROGRAM: &str = r#"{} // By itself.

// In a statement.
if (true) {}
if (false) {} else {}

print "ok";"#;
    let printed = vm.interpret(PROGRAM)?;
    assert_eq!(printed, &["ok"]);
    Ok(())
}

#[test]
fn test_block_scope() -> Result<()> {
    let mut vm = VM::new();
    const PROGRAM: &str = r#"var a = "outer";
{
  var a = "inner";
  print a; //
}
print a;"#;
    let printed = vm.interpret(PROGRAM)?;
    assert_eq!(printed, &["inner", "outer"]);
    Ok(())
}

#[test]
fn test_bool_equality() -> Result<()> {
    let mut vm = VM::new();
    const PROGRAM: &str = r#"print true == true;
print true == false;
print false == true;
print false == false;

// Not equal to other types.
print true == 1;
print false == 0;
print true == "true";
print false == "false";
print false == "";

print true != true;
print true != false;
print false != true;
print false != false;

// Not equal to other types.
print true != 1;
print false != 0;
print true != "true"; 
print false != "false";
print false != "";
"#;
    let printed = vm.interpret(PROGRAM)?;

    let expected = &[
        "true", "false", "false", "true", "false", "false", "false", "false", "false", "false",
        "true", "true", "false", "true", "true", "true", "true", "true",
    ];

    assert_eq!(printed, expected);
    Ok(())
}

#[test]
fn test_bool_not() -> Result<()> {
    let mut vm = VM::new();
    const PROGRAM: &str = r#"print !true;
    print !false;
    print !!true;"#;
    let printed = vm.interpret(PROGRAM)?;
    assert_eq!(printed, &["false", "true", "true"]);
    Ok(())
}

#[test]
fn test_expression_evaluate() -> Result<()> {
    let mut vm = VM::new();
    const PROGRAM: &str = "print (5 - (3 - 1)) + -1;";
    let printed = vm.interpret(PROGRAM)?;
    assert_eq!(printed, &["2"]);
    Ok(())
}

#[test]
fn test_expression_lexer() -> Result<()> {
    let mut vm = VM::new();
    const PROGRAM: &str = r#"(5 - (3 - 1)) + -1"#;
    let tokens = vm.lex(PROGRAM)?;
    use rclox::lexer::Token;
    use rclox::lexer::TokenType::*;
    #[rustfmt::skip]
    let expected = &[
        Token {kind: LeftParen, string: "(", line: 0},
        Token {kind: Number, string: "5", line: 0},
        Token {kind: Minus, string: "-", line: 0},
        Token {kind: LeftParen, string: "(", line: 0},
        Token {kind: Number, string: "3", line: 0},
        Token {kind: Minus, string: "-", line: 0},
        Token {kind: Number, string: "1", line: 0},
        Token {kind: RightParen, string: ")", line: 0},
        Token {kind: RightParen, string: ")", line: 0},
        Token {kind: Plus, string: "+", line: 0},
        Token {kind: Minus, string: "-", line: 0},
        Token {kind: Number, string: "1", line: 0},
        Token {kind: Eof, string: "", line: 0},
    ];
    println!("{:#?}", tokens);
    assert_eq!(tokens, expected);
    Ok(())
}

#[test]
fn test_for_scope() -> Result<()> {
    let mut vm = VM::new();
    const PROGRAM: &str = r#"{
      var i = "before";

      // New variable is in inner scope.
      for (var i = 0; i < 1; i = i + 1) {
        print i; // expect: 0

        // Loop body is in second inner scope.
        var i = -1;
        print i; // expect: -1
      }
    }

    {
      // New variable shadows outer variable.
      for (var i = 0; i > 0; i = i + 1) {}

      // Goes out of scope after loop.
      var i = "after";
      print i; // expect: after

      // Can reuse an existing variable.
      for (i = 0; i < 1; i = i + 1) {
        print i; // expect: 0
      }
    }"#;
    let printed = vm.interpret(PROGRAM)?;
    assert_eq!(printed, &["0", "-1", "after", "0"]);
    Ok(())
}

#[test]
fn test_for_syntax() -> Result<()> {
    let mut vm = VM::new();
    const PROGRAM: &str = r#"// Single-expression body.
    for (var c = 0; c < 3;) print c = c + 1;
    // expect: 1
    // expect: 2
    // expect: 3

    // Block body.
    for (var a = 0; a < 3; a = a + 1) {
      print a;
    }
    // expect: 0
    // expect: 1
    // expect: 2

    // No variable.
    var i = 0;
    for (; i < 2; i = i + 1) print i;
    // expect: 0
    // expect: 1

    // No increment.
    for (var i = 0; i < 2;) {
      print i;
      i = i + 1;
    }
    // expect: 0
    // expect: 1

    // Statement bodies.
    for (; false;) if (true) 1; else 2;
    for (; false;) while (true) 1;
    for (; false;) for (;;) 1;"#;
    let printed = vm.interpret(PROGRAM)?;
    assert_eq!(printed, &["1", "2", "3", "0", "1", "2", "0", "1", "0", "1"]);
    Ok(())
}

#[test]
#[ignore = "Not yet implemented"]
fn test_for_closure_in_body() -> Result<()> {
    let mut vm = VM::new();
    const PROGRAM: &str = r#"
var f1;
var f2;
var f3;

for (var i = 1; i < 4; i = i + 1) {
  var j = i;
  fun f() {
    print i;
    print j;
  }

  if (j == 1) f1 = f;
  else if (j == 2) f2 = f;
  else f3 = f;
}

f1(); // expect: 4
      // expect: 1
f2(); // expect: 4
      // expect: 2
f3(); // expect: 4
      // expect: 3
"#;
    let printed = vm.interpret(PROGRAM)?;
    assert_eq!(printed, &["4", "1", "4", "2", "4", "3"]);
    Ok(())
}

#[test]
fn test_for_fun_in_body() -> Result<()> {
    let mut vm = VM::new();
    const PROGRAM: &str = r#"// [line 2] Error at 'fun': Expect expression.
for (;;) fun foo() {}"#;
    check_error_msg!(
        vm.interpret(PROGRAM),
        "<Compiler> [Line 1] Error at \'fun\': Expected expression.",
        "'function declaration' is not an expression."
    );
    Ok(())
}

#[test]
#[ignore = "Not yet implemented"]
fn test_for_return_closure() -> Result<()> {
    let mut vm = VM::new();
    const PROGRAM: &str = r#"
fun f() {
  for (;;) {
    var i = "i";
    fun g() { print i; }
    return g;
  }
}

var h = f();
h(); // expect: i
"#;
    let printed = vm.interpret(PROGRAM)?;
    assert_eq!(printed, &["i"]);
    Ok(())
}

#[test]
#[ignore = "Not yet implemented"]
fn test_for_return_inside() -> Result<()> {
    let mut vm = VM::new();
    const PROGRAM: &str = r#"
fun f() {
  for (;;) {
    var i = "i";
    return i;
  }
}

print f();
// expect: i
"#;
    let printed = vm.interpret(PROGRAM)?;
    assert_eq!(printed, &["i"]);
    Ok(())
}
